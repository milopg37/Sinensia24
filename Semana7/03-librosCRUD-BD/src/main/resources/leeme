RECURSO: libro

Vamos a ofrecer un CRUD de libro utilizando BD

GET 	--> 	recuperar
POST 	--> 	insertar
PUT 	--> 	actualizar
DELETE 	--> 	borrar

http://localhost:8080/libros			GET: expone todos los libros
http://localhost:8080/libros/{isbn}		GET: recupere el libro con isbn por URL
http://localhost:8080/libros			POST: dar de alta un libro del que paso los datos en el cuerpo en JSON (@RequestBody)
http://localhost:8080/libros			PUT: actualizo un libro del que paso los datos en el cuerpo en JSON (@RequestBody)
http://localhost:8080/libros/{isbn}		DELETE: borrar un libro por isbn que viaja por URL

ORDEN DE CREACION:
1- Crear proyecto (dependencies)

2- Definir modelo de datos

3- Crear Acceso a Datos (package DAO) e interfaz que implemente JpaRepository

4- Capa de la lógica de negocio, servicios
	4.1 Crear la interfaz
	4.2 Crear clase que implemente esa interfaz (incluir @Service) e instanciar DAO
	
5- Implementar el controller (com.curso.controller) (incluir @RestController) e instanciar @AutoWired LibroService service

6- Configuraciones
	6.1 En la clase lanzadora añadir los packages que tienen clases con Spring Tags @
		@EntityScan(basePackages = "")
		@EnableJpaRepositories(basePackages = "")
		@SpringBootApplication(scanBasePackages = {"", ""})
		
	6.2 En el application.properties incorporar las propiedades necesarias para poder trabajar con la BD
		
7- Realizar las request y probar desde Postman