MICROSERVICIO: Reserva

Vamos a ofrecer un CRUD de Reservas más algunas funciones extras utilizando BD con Spring JPA

GET 	--> 	Recuperar
POST 	--> 	Insertar
PUT 	--> 	Actualizar
DELETE 	--> 	Borrar

http://localhost:7070/reserva/listar							GET: Devuelve lista con todas las reservas
http://localhost:7070/reserva/find/{idReserva}					GET: Devuelve una reserva dado su ID
http://localhost:7070/reserva/nuevo								POST: Agrega una nueva reserva, devuelve lista
http://localhost:7070/reserva/update/{idReserva}/{nuevoCliente}	PUT: Actualiza nombre del cliente a la cual está la reserva, devuelve lista
http://localhost:7070/reserva/delete/{idReserva}				DELETE: Borra un vuelo dado su ID

http://localhost:7070/reserva/vuelo								POST: Recibe datos en @RequestBody
																	  LLama al controller de vuelos (vueloReservado())
																	  Los datos que envia son: idvuelo, idhotel, nombre, dni y plazasReservadas
																	  
http://localhost:7070/reserva/									GET: Devuelve las reservas existentes (nombre,dni,vuelo)
																	 Paraa el nombre hotel recibido como @PathVariable
																	 LLama al controller de hoteles (findByName())

	Antes de nada, crear la carpeta Scripts en resources->scriptsSQL 
	Donde estarán nuestros scripts de creacion de la tabla del modelo con sus columnas
	Y el insert into para rellenar con algunos datos

1- Crear proyecto y poner dependencias (Starter Web, Spring Data JPA)

2- Definir el modelo (package models) y mapearlo con anotaciones JPA a la tabla de la BD

3- Crear Acceso a Datos (package DAO) e interfaz que implemente JpaRepository
	Esto es necesario cuando tenemos BD
	3.1 Crear la interfaz que herede de JpaRepository

4- Trabajar con la capa de servicio (package service)
	4.1 Crear la interfaz y añadir los métodos necesarios
	4.2 Crear clase que implemente esa interfaz (@Service) (crear RestTemplate y poner Autowired en caso de necesitarlo)
	
4- Implementar el controllador (@RestController) (instanciar el service con @Autowired)

5- Configuraciones
	5.1 En la clase lanzadora indicar los packages:
		@EntityScan(basePackages = "")
		@EnableJpaRepositories(basePackages = "")
		@SpringBootApplication(scanBasePackages = {"", ""})
	
	5.2 Crear el @Bean del RestTemplate (en el main)
	
		@Bean
		RestTemplate template() {
		return new RestTemplate();
		}
	
	5.3 Modificar el application-properties si es necesario añadir algo extra 
	Asignar un nº de puerto valido y libre: server.port=7000
	
6- Probar con Postman
	http://localhost:7070/{URL}
	El resto de microservicios van a tener que utilizar puertos diferentes
	